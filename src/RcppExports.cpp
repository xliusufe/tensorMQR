// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace Eigen;

// TransferModalUnfoldings
MatrixXd TransferModalUnfoldings(MatrixXd S, int d1, int d2, int r1, int r2, int r3);
RcppExport SEXP _tensorMQR1_TransferModalUnfoldings(SEXP SSEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP r3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< int >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< int >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< int >::type r3(r3SEXP);
    rcpp_result_gen = Rcpp::wrap(TransferModalUnfoldings(S, d1, d2, r1, r2, r3));
    return rcpp_result_gen;
END_RCPP
}
// setuplambdaUn
VectorXd setuplambdaUn(MatrixXd Y, MatrixXd Z, MatrixXd A, MatrixXd B, MatrixXd C, MatrixXd S, int nlam, VectorXd setlam);
RcppExport SEXP _tensorMQR1_setuplambdaUn(SEXP YSEXP, SEXP ZSEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP SSEXP, SEXP nlamSEXP, SEXP setlamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type C(CSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type nlam(nlamSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type setlam(setlamSEXP);
    rcpp_result_gen = Rcpp::wrap(setuplambdaUn(Y, Z, A, B, C, S, nlam, setlam));
    return rcpp_result_gen;
END_RCPP
}
// produceZ
MatrixXd produceZ(MatrixXd X);
RcppExport SEXP _tensorMQR1_produceZ(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(produceZ(X));
    return rcpp_result_gen;
END_RCPP
}
// produceX2
MatrixXd produceX2(MatrixXd X);
RcppExport SEXP _tensorMQR1_produceX2(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(produceX2(X));
    return rcpp_result_gen;
END_RCPP
}
// TransferTtoP
MatrixXd TransferTtoP(MatrixXd D3, int p, int q);
RcppExport SEXP _tensorMQR1_TransferTtoP(SEXP D3SEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type D3(D3SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(TransferTtoP(D3, p, q));
    return rcpp_result_gen;
END_RCPP
}
// TransferPtoT
MatrixXd TransferPtoT(VectorXd coef, int p, int q);
RcppExport SEXP _tensorMQR1_TransferPtoT(SEXP coefSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(TransferPtoT(coef, p, q));
    return rcpp_result_gen;
END_RCPP
}
// setuplambda
VectorXd setuplambda(MatrixXd Y, MatrixXd X, MatrixXd S, MatrixXd U, MatrixXd V, int isPenU, int nlam, VectorXd setlam);
RcppExport SEXP _tensorMQR1_setuplambda(SEXP YSEXP, SEXP XSEXP, SEXP SSEXP, SEXP USEXP, SEXP VSEXP, SEXP isPenUSEXP, SEXP nlamSEXP, SEXP setlamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type isPenU(isPenUSEXP);
    Rcpp::traits::input_parameter< int >::type nlam(nlamSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type setlam(setlamSEXP);
    rcpp_result_gen = Rcpp::wrap(setuplambda(Y, X, S, U, V, isPenU, nlam, setlam));
    return rcpp_result_gen;
END_RCPP
}
// EstFR
List EstFR(MatrixXd Y, MatrixXd X);
RcppExport SEXP _tensorMQR1_EstFR(SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(EstFR(Y, X));
    return rcpp_result_gen;
END_RCPP
}
// EstUnconstr
List EstUnconstr(MatrixXd Y, MatrixXd X, MatrixXd S, MatrixXd A, MatrixXd B, MatrixXd C, VectorXd mu, List optsList);
RcppExport SEXP _tensorMQR1_EstUnconstr(SEXP YSEXP, SEXP XSEXP, SEXP SSEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP muSEXP, SEXP optsListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type C(CSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type optsList(optsListSEXP);
    rcpp_result_gen = Rcpp::wrap(EstUnconstr(Y, X, S, A, B, C, mu, optsList));
    return rcpp_result_gen;
END_RCPP
}
// Estimation
List Estimation(MatrixXd Y, MatrixXd X, MatrixXd S, MatrixXd U, MatrixXd V, VectorXd mu, List optsList);
RcppExport SEXP _tensorMQR1_Estimation(SEXP YSEXP, SEXP XSEXP, SEXP SSEXP, SEXP USEXP, SEXP VSEXP, SEXP muSEXP, SEXP optsListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type optsList(optsListSEXP);
    rcpp_result_gen = Rcpp::wrap(Estimation(Y, X, S, U, V, mu, optsList));
    return rcpp_result_gen;
END_RCPP
}
// EstPenColumn
List EstPenColumn(MatrixXd Y, MatrixXd X, MatrixXd S, MatrixXd U, MatrixXd V, VectorXd lambda, List optsList, List optsList_pen);
RcppExport SEXP _tensorMQR1_EstPenColumn(SEXP YSEXP, SEXP XSEXP, SEXP SSEXP, SEXP USEXP, SEXP VSEXP, SEXP lambdaSEXP, SEXP optsListSEXP, SEXP optsList_penSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< List >::type optsList(optsListSEXP);
    Rcpp::traits::input_parameter< List >::type optsList_pen(optsList_penSEXP);
    rcpp_result_gen = Rcpp::wrap(EstPenColumn(Y, X, S, U, V, lambda, optsList, optsList_pen));
    return rcpp_result_gen;
END_RCPP
}
// EstPenSingle
List EstPenSingle(MatrixXd Y, MatrixXd X, MatrixXd S, MatrixXd U, MatrixXd V, VectorXd lambda, List optsList, List optsList_pen);
RcppExport SEXP _tensorMQR1_EstPenSingle(SEXP YSEXP, SEXP XSEXP, SEXP SSEXP, SEXP USEXP, SEXP VSEXP, SEXP lambdaSEXP, SEXP optsListSEXP, SEXP optsList_penSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< List >::type optsList(optsListSEXP);
    Rcpp::traits::input_parameter< List >::type optsList_pen(optsList_penSEXP);
    rcpp_result_gen = Rcpp::wrap(EstPenSingle(Y, X, S, U, V, lambda, optsList, optsList_pen));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tensorMQR1_TransferModalUnfoldings", (DL_FUNC) &_tensorMQR1_TransferModalUnfoldings, 6},
    {"_tensorMQR1_setuplambdaUn", (DL_FUNC) &_tensorMQR1_setuplambdaUn, 8},
    {"_tensorMQR1_produceZ", (DL_FUNC) &_tensorMQR1_produceZ, 1},
    {"_tensorMQR1_produceX2", (DL_FUNC) &_tensorMQR1_produceX2, 1},
    {"_tensorMQR1_TransferTtoP", (DL_FUNC) &_tensorMQR1_TransferTtoP, 3},
    {"_tensorMQR1_TransferPtoT", (DL_FUNC) &_tensorMQR1_TransferPtoT, 3},
    {"_tensorMQR1_setuplambda", (DL_FUNC) &_tensorMQR1_setuplambda, 8},
    {"_tensorMQR1_EstFR", (DL_FUNC) &_tensorMQR1_EstFR, 2},
    {"_tensorMQR1_EstUnconstr", (DL_FUNC) &_tensorMQR1_EstUnconstr, 8},
    {"_tensorMQR1_Estimation", (DL_FUNC) &_tensorMQR1_Estimation, 7},
    {"_tensorMQR1_EstPenColumn", (DL_FUNC) &_tensorMQR1_EstPenColumn, 8},
    {"_tensorMQR1_EstPenSingle", (DL_FUNC) &_tensorMQR1_EstPenSingle, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_tensorMQR1(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
